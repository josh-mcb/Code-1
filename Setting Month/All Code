
#include "UUDate.h"
#include <vector>
#include <string>
#include <array>
#include <stdio.h>
#include <sstream>

UUDate::UUDate(){
	SetYear(2000);
	SetMonth(01);
	SetDay(01);
	//Initialise the date to 01/01/2000
	//TODO - Add your implementation here
}

bool isValidYear(int year) {
	if (year > 1000 && year < 10000)
		return true;
}

bool isValidMonth(int month) {
	if (month > 0 || month < 13)
		return true;
	
}


bool isValidDay(int day) {
	//if (day > 0 && day <= 31)
		//return true;
	//else if (day > 0 && day <= 30)
		//return true;
	//else if (day > 0 && day <= 29)
		//return true;
		
	if((year_ % 4 == 0) && (year_ % 100 != 0)&& (month_ == 2)) {
		if(day <= 29) {
		return true;
		}
	 }
	else if (month_ == 2) {
		if(day <= 28) {
		return true;
		}
	}
	else if(month_ == 4 || month_ == 6 || month_ == 9 || month_ == 11) {
		if(day <= 30) {
		return true;
		}
	}
	else if((month_ == 1) || (month_ == 3) || (month_ == 5) || (month_ == 7) || (month_ == 8) || (month_ == 10) || (month_ == 12)) {
		if(day <= 31) {
		return true;
		}
	}
	
        return false;
}


UUDate::UUDate(int day, int month, int year){
	year_ = 2000;
	month_ = 01;
	day_ = 01;
	SetYear(year);
	SetMonth(month);
	SetDay(day);
}

UUDate::UUDate(std::string date) {
	//TODO - Add your implementation here
	int day, month, year;

	std::string holdString;
	std::stringstream Date(date);
	
	std::vector < std::string> dateVector;
	while (std::getline(Date, holdString, '/')) {
	dateVector.push_back(holdString);
	}
	day = atoi(dateVector[0].c_str());
	month = atoi(dateVector[1].c_str());
	year = atoi(dateVector[2].c_str());

	day_ = day;
	month_ = month;
	year_ = year;
	

}

void UUDate::IncrementDate() {
	//TODO - Add your implementation here
	int daymax, monthmax;

	bool leapyear = false;

	monthmax = 12;


	if ((year_ % 4 == 0) && (year_ % 100 != 0))
	{
		leapyear = true;
	}
	else if ((year_ % 100 == 0) && (year_ % 400 == 0))
	{
		leapyear = true;
	}
	else if (year_ % 400 == 0)
	{
		leapyear = true;
	}
	else
	{
		leapyear = false;
	}

	if (month_ == 2 && leapyear == true) {
		daymax = 29;
	}
	else if (month_ == 2 && leapyear == false) {
		daymax = 28;
	}
	else if (month_ == 4 || month_ == 6 || month_ == 9 || month_ == 11) {
		daymax = 30;
	}
	else {
		daymax = 31;
	}



	if (day_ > 0 && day_ < daymax) {
		day_++;
	}
	else if (day_ >= daymax && month_ < monthmax) {
		day_ = 1;
		month_++;
	}
	else if (day_ >= daymax && month_ >= monthmax) {
		day_ = 1;
		month_ = 1;
		year_++;
	}

}

int UUDate::Between(UUDate date) {
	return 0;
	//TODO - Add your implementation here
}

int UUDate::GetDay() const {
	return day_;
	//TODO - Add your implementation here
}

void UUDate::SetDay(int day) {
	if (isValidDay(day)) {
		day_ = day;
	}
}

int UUDate::GetMonth() const {
	
	return month_;
	//TODO - Add your implementation here
}

void UUDate::SetMonth(int month) {
	if (month > 0 && month < 13) {
		month_ = month;
	}

}

int UUDate::GetYear() const {
	return year_;
	//TODO - Add your implementation here
}

void UUDate::SetYear(int year) {
	if (year >= 1000 && year < 10000) {
		year_ = year;
	}
}

std::string UUDate::GetDate() {
	//TODO - Add your implementation here

	char var[40] = { 0 };
	sprintf(var, "%02d/%02d/%02d", day_, month_, year_);
	std::string Date = var;
	return Date;
}
